// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_EDCHM_RCPPEXPORTS_H_GEN_
#define RCPP_EDCHM_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace EDCHM {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("EDCHM", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("EDCHM", "_EDCHM_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in EDCHM");
            }
        }
    }

    inline NumericVector atmosSnow_ThresholdT(NumericVector atmos_precipitation_mm, NumericVector atmos_temperature_Cel, NumericVector param_atmos_thr_Ts) {
        typedef SEXP(*Ptr_atmosSnow_ThresholdT)(SEXP,SEXP,SEXP);
        static Ptr_atmosSnow_ThresholdT p_atmosSnow_ThresholdT = NULL;
        if (p_atmosSnow_ThresholdT == NULL) {
            validateSignature("NumericVector(*atmosSnow_ThresholdT)(NumericVector,NumericVector,NumericVector)");
            p_atmosSnow_ThresholdT = (Ptr_atmosSnow_ThresholdT)R_GetCCallable("EDCHM", "_EDCHM_atmosSnow_ThresholdT");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_atmosSnow_ThresholdT(Shield<SEXP>(Rcpp::wrap(atmos_precipitation_mm)), Shield<SEXP>(Rcpp::wrap(atmos_temperature_Cel)), Shield<SEXP>(Rcpp::wrap(param_atmos_thr_Ts)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector atmosSnow_UBC(NumericVector atmos_precipitation_mm, NumericVector atmos_temperature_Cel, NumericVector param_atmos_ubc_A0FORM) {
        typedef SEXP(*Ptr_atmosSnow_UBC)(SEXP,SEXP,SEXP);
        static Ptr_atmosSnow_UBC p_atmosSnow_UBC = NULL;
        if (p_atmosSnow_UBC == NULL) {
            validateSignature("NumericVector(*atmosSnow_UBC)(NumericVector,NumericVector,NumericVector)");
            p_atmosSnow_UBC = (Ptr_atmosSnow_UBC)R_GetCCallable("EDCHM", "_EDCHM_atmosSnow_UBC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_atmosSnow_UBC(Shield<SEXP>(Rcpp::wrap(atmos_precipitation_mm)), Shield<SEXP>(Rcpp::wrap(atmos_temperature_Cel)), Shield<SEXP>(Rcpp::wrap(param_atmos_ubc_A0FORM)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector baseflow_SupplyPow(NumericVector ground_water_mm, NumericVector ground_capacity_mm, NumericVector param_baseflow_sup_k, NumericVector param_baseflow_sup_gamma) {
        typedef SEXP(*Ptr_baseflow_SupplyPow)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_baseflow_SupplyPow p_baseflow_SupplyPow = NULL;
        if (p_baseflow_SupplyPow == NULL) {
            validateSignature("NumericVector(*baseflow_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_baseflow_SupplyPow = (Ptr_baseflow_SupplyPow)R_GetCCallable("EDCHM", "_EDCHM_baseflow_SupplyPow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_baseflow_SupplyPow(Shield<SEXP>(Rcpp::wrap(ground_water_mm)), Shield<SEXP>(Rcpp::wrap(ground_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_baseflow_sup_k)), Shield<SEXP>(Rcpp::wrap(param_baseflow_sup_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector baseflow_SupplyRatio(NumericVector ground_water_mm, NumericVector param_baseflow_sur_k) {
        typedef SEXP(*Ptr_baseflow_SupplyRatio)(SEXP,SEXP);
        static Ptr_baseflow_SupplyRatio p_baseflow_SupplyRatio = NULL;
        if (p_baseflow_SupplyRatio == NULL) {
            validateSignature("NumericVector(*baseflow_SupplyRatio)(NumericVector,NumericVector)");
            p_baseflow_SupplyRatio = (Ptr_baseflow_SupplyRatio)R_GetCCallable("EDCHM", "_EDCHM_baseflow_SupplyRatio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_baseflow_SupplyRatio(Shield<SEXP>(Rcpp::wrap(ground_water_mm)), Shield<SEXP>(Rcpp::wrap(param_baseflow_sur_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector capirise_SupplyRatio(NumericVector ground_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_capirise_sur_k) {
        typedef SEXP(*Ptr_capirise_SupplyRatio)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_capirise_SupplyRatio p_capirise_SupplyRatio = NULL;
        if (p_capirise_SupplyRatio == NULL) {
            validateSignature("NumericVector(*capirise_SupplyRatio)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_capirise_SupplyRatio = (Ptr_capirise_SupplyRatio)R_GetCCallable("EDCHM", "_EDCHM_capirise_SupplyRatio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_capirise_SupplyRatio(Shield<SEXP>(Rcpp::wrap(ground_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_capirise_sur_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector capirise_SupplyPow(NumericVector ground_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_capirise_sup_k, NumericVector param_capirise_sup_gamma) {
        typedef SEXP(*Ptr_capirise_SupplyPow)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_capirise_SupplyPow p_capirise_SupplyPow = NULL;
        if (p_capirise_SupplyPow == NULL) {
            validateSignature("NumericVector(*capirise_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_capirise_SupplyPow = (Ptr_capirise_SupplyPow)R_GetCCallable("EDCHM", "_EDCHM_capirise_SupplyPow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_capirise_SupplyPow(Shield<SEXP>(Rcpp::wrap(ground_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_capirise_sup_k)), Shield<SEXP>(Rcpp::wrap(param_capirise_sup_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector capirise_AcceptRatio(NumericVector ground_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_capirise_acr_k) {
        typedef SEXP(*Ptr_capirise_AcceptRatio)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_capirise_AcceptRatio p_capirise_AcceptRatio = NULL;
        if (p_capirise_AcceptRatio == NULL) {
            validateSignature("NumericVector(*capirise_AcceptRatio)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_capirise_AcceptRatio = (Ptr_capirise_AcceptRatio)R_GetCCallable("EDCHM", "_EDCHM_capirise_AcceptRatio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_capirise_AcceptRatio(Shield<SEXP>(Rcpp::wrap(ground_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_capirise_acr_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector capirise_AcceptPow(NumericVector ground_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_capirise_acp_k, NumericVector param_capirise_acp_gamma) {
        typedef SEXP(*Ptr_capirise_AcceptPow)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_capirise_AcceptPow p_capirise_AcceptPow = NULL;
        if (p_capirise_AcceptPow == NULL) {
            validateSignature("NumericVector(*capirise_AcceptPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_capirise_AcceptPow = (Ptr_capirise_AcceptPow)R_GetCCallable("EDCHM", "_EDCHM_capirise_AcceptPow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_capirise_AcceptPow(Shield<SEXP>(Rcpp::wrap(ground_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_capirise_acp_k)), Shield<SEXP>(Rcpp::wrap(param_capirise_acp_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector confluen_IUH(NumericVector confluen_inputWater_mm, NumericVector confluen_iuh_1) {
        typedef SEXP(*Ptr_confluen_IUH)(SEXP,SEXP);
        static Ptr_confluen_IUH p_confluen_IUH = NULL;
        if (p_confluen_IUH == NULL) {
            validateSignature("NumericVector(*confluen_IUH)(NumericVector,NumericVector)");
            p_confluen_IUH = (Ptr_confluen_IUH)R_GetCCallable("EDCHM", "_EDCHM_confluen_IUH");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_confluen_IUH(Shield<SEXP>(Rcpp::wrap(confluen_inputWater_mm)), Shield<SEXP>(Rcpp::wrap(confluen_iuh_1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector confluen_IUH2S(NumericVector land_runoff_mm, NumericVector ground_baseflow_mm, NumericVector confluen_iuhLand_1, NumericVector confluen_iuhGround_1) {
        typedef SEXP(*Ptr_confluen_IUH2S)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_confluen_IUH2S p_confluen_IUH2S = NULL;
        if (p_confluen_IUH2S == NULL) {
            validateSignature("NumericVector(*confluen_IUH2S)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_confluen_IUH2S = (Ptr_confluen_IUH2S)R_GetCCallable("EDCHM", "_EDCHM_confluen_IUH2S");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_confluen_IUH2S(Shield<SEXP>(Rcpp::wrap(land_runoff_mm)), Shield<SEXP>(Rcpp::wrap(ground_baseflow_mm)), Shield<SEXP>(Rcpp::wrap(confluen_iuhLand_1)), Shield<SEXP>(Rcpp::wrap(confluen_iuhGround_1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector confluenIUH_GR4J1(double confluen_resposeTime_TS) {
        typedef SEXP(*Ptr_confluenIUH_GR4J1)(SEXP);
        static Ptr_confluenIUH_GR4J1 p_confluenIUH_GR4J1 = NULL;
        if (p_confluenIUH_GR4J1 == NULL) {
            validateSignature("NumericVector(*confluenIUH_GR4J1)(double)");
            p_confluenIUH_GR4J1 = (Ptr_confluenIUH_GR4J1)R_GetCCallable("EDCHM", "_EDCHM_confluenIUH_GR4J1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_confluenIUH_GR4J1(Shield<SEXP>(Rcpp::wrap(confluen_resposeTime_TS)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector confluenIUH_GR4J2(double confluen_resposeTime_TS) {
        typedef SEXP(*Ptr_confluenIUH_GR4J2)(SEXP);
        static Ptr_confluenIUH_GR4J2 p_confluenIUH_GR4J2 = NULL;
        if (p_confluenIUH_GR4J2 == NULL) {
            validateSignature("NumericVector(*confluenIUH_GR4J2)(double)");
            p_confluenIUH_GR4J2 = (Ptr_confluenIUH_GR4J2)R_GetCCallable("EDCHM", "_EDCHM_confluenIUH_GR4J2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_confluenIUH_GR4J2(Shield<SEXP>(Rcpp::wrap(confluen_resposeTime_TS)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransPotential_TurcWendling(NumericVector atmos_temperature_Cel, NumericVector atmos_solarRadiat_MJ, NumericVector time_step_h, NumericVector param_evatrans_tur_k) {
        typedef SEXP(*Ptr_evatransPotential_TurcWendling)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransPotential_TurcWendling p_evatransPotential_TurcWendling = NULL;
        if (p_evatransPotential_TurcWendling == NULL) {
            validateSignature("NumericVector(*evatransPotential_TurcWendling)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransPotential_TurcWendling = (Ptr_evatransPotential_TurcWendling)R_GetCCallable("EDCHM", "_EDCHM_evatransPotential_TurcWendling");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransPotential_TurcWendling(Shield<SEXP>(Rcpp::wrap(atmos_temperature_Cel)), Shield<SEXP>(Rcpp::wrap(atmos_solarRadiat_MJ)), Shield<SEXP>(Rcpp::wrap(time_step_h)), Shield<SEXP>(Rcpp::wrap(param_evatrans_tur_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransPotential_Linacre(NumericVector time_dayOfYear_, NumericVector atmos_temperature_Cel, NumericVector atmos_relativeHumidity_1, NumericVector land_latitude_Degree, NumericVector land_elevation_m, NumericVector land_albedo_1) {
        typedef SEXP(*Ptr_evatransPotential_Linacre)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransPotential_Linacre p_evatransPotential_Linacre = NULL;
        if (p_evatransPotential_Linacre == NULL) {
            validateSignature("NumericVector(*evatransPotential_Linacre)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransPotential_Linacre = (Ptr_evatransPotential_Linacre)R_GetCCallable("EDCHM", "_EDCHM_evatransPotential_Linacre");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransPotential_Linacre(Shield<SEXP>(Rcpp::wrap(time_dayOfYear_)), Shield<SEXP>(Rcpp::wrap(atmos_temperature_Cel)), Shield<SEXP>(Rcpp::wrap(atmos_relativeHumidity_1)), Shield<SEXP>(Rcpp::wrap(land_latitude_Degree)), Shield<SEXP>(Rcpp::wrap(land_elevation_m)), Shield<SEXP>(Rcpp::wrap(land_albedo_1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransPotential_FAO56(NumericVector time_dayOfYear_, NumericVector atmos_temperature_Cel, NumericVector atmos_vaporPress_hPa, NumericVector atmos_saturatVaporPress_hPa, NumericVector atmos_netRadiat_MJ, NumericVector atmos_windSpeed2m_m_s, NumericVector land_latitude_Degree, NumericVector land_elevation_m) {
        typedef SEXP(*Ptr_evatransPotential_FAO56)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransPotential_FAO56 p_evatransPotential_FAO56 = NULL;
        if (p_evatransPotential_FAO56 == NULL) {
            validateSignature("NumericVector(*evatransPotential_FAO56)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransPotential_FAO56 = (Ptr_evatransPotential_FAO56)R_GetCCallable("EDCHM", "_EDCHM_evatransPotential_FAO56");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransPotential_FAO56(Shield<SEXP>(Rcpp::wrap(time_dayOfYear_)), Shield<SEXP>(Rcpp::wrap(atmos_temperature_Cel)), Shield<SEXP>(Rcpp::wrap(atmos_vaporPress_hPa)), Shield<SEXP>(Rcpp::wrap(atmos_saturatVaporPress_hPa)), Shield<SEXP>(Rcpp::wrap(atmos_netRadiat_MJ)), Shield<SEXP>(Rcpp::wrap(atmos_windSpeed2m_m_s)), Shield<SEXP>(Rcpp::wrap(land_latitude_Degree)), Shield<SEXP>(Rcpp::wrap(land_elevation_m)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransActual_SupplyRatio(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_sur_k) {
        typedef SEXP(*Ptr_evatransActual_SupplyRatio)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransActual_SupplyRatio p_evatransActual_SupplyRatio = NULL;
        if (p_evatransActual_SupplyRatio == NULL) {
            validateSignature("NumericVector(*evatransActual_SupplyRatio)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransActual_SupplyRatio = (Ptr_evatransActual_SupplyRatio)R_GetCCallable("EDCHM", "_EDCHM_evatransActual_SupplyRatio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransActual_SupplyRatio(Shield<SEXP>(Rcpp::wrap(atmos_potentialEvatrans_mm)), Shield<SEXP>(Rcpp::wrap(water_mm)), Shield<SEXP>(Rcpp::wrap(capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_evatrans_sur_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransActual_SupplyPow(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_sup_k, NumericVector param_evatrans_sup_gamma) {
        typedef SEXP(*Ptr_evatransActual_SupplyPow)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransActual_SupplyPow p_evatransActual_SupplyPow = NULL;
        if (p_evatransActual_SupplyPow == NULL) {
            validateSignature("NumericVector(*evatransActual_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransActual_SupplyPow = (Ptr_evatransActual_SupplyPow)R_GetCCallable("EDCHM", "_EDCHM_evatransActual_SupplyPow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransActual_SupplyPow(Shield<SEXP>(Rcpp::wrap(atmos_potentialEvatrans_mm)), Shield<SEXP>(Rcpp::wrap(water_mm)), Shield<SEXP>(Rcpp::wrap(capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_evatrans_sup_k)), Shield<SEXP>(Rcpp::wrap(param_evatrans_sup_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransActual_AcceptRatio(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector param_evatrans_acr_k) {
        typedef SEXP(*Ptr_evatransActual_AcceptRatio)(SEXP,SEXP,SEXP);
        static Ptr_evatransActual_AcceptRatio p_evatransActual_AcceptRatio = NULL;
        if (p_evatransActual_AcceptRatio == NULL) {
            validateSignature("NumericVector(*evatransActual_AcceptRatio)(NumericVector,NumericVector,NumericVector)");
            p_evatransActual_AcceptRatio = (Ptr_evatransActual_AcceptRatio)R_GetCCallable("EDCHM", "_EDCHM_evatransActual_AcceptRatio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransActual_AcceptRatio(Shield<SEXP>(Rcpp::wrap(atmos_potentialEvatrans_mm)), Shield<SEXP>(Rcpp::wrap(water_mm)), Shield<SEXP>(Rcpp::wrap(param_evatrans_acr_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransActual_AcceptPow(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector param_evatrans_acp_k, NumericVector param_evatrans_acp_gamma) {
        typedef SEXP(*Ptr_evatransActual_AcceptPow)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransActual_AcceptPow p_evatransActual_AcceptPow = NULL;
        if (p_evatransActual_AcceptPow == NULL) {
            validateSignature("NumericVector(*evatransActual_AcceptPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransActual_AcceptPow = (Ptr_evatransActual_AcceptPow)R_GetCCallable("EDCHM", "_EDCHM_evatransActual_AcceptPow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransActual_AcceptPow(Shield<SEXP>(Rcpp::wrap(atmos_potentialEvatrans_mm)), Shield<SEXP>(Rcpp::wrap(water_mm)), Shield<SEXP>(Rcpp::wrap(param_evatrans_acp_k)), Shield<SEXP>(Rcpp::wrap(param_evatrans_acp_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransActual_VIC(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_vic_gamma) {
        typedef SEXP(*Ptr_evatransActual_VIC)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransActual_VIC p_evatransActual_VIC = NULL;
        if (p_evatransActual_VIC == NULL) {
            validateSignature("NumericVector(*evatransActual_VIC)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransActual_VIC = (Ptr_evatransActual_VIC)R_GetCCallable("EDCHM", "_EDCHM_evatransActual_VIC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransActual_VIC(Shield<SEXP>(Rcpp::wrap(atmos_potentialEvatrans_mm)), Shield<SEXP>(Rcpp::wrap(water_mm)), Shield<SEXP>(Rcpp::wrap(capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_evatrans_vic_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransActual_GR4J(NumericVector atmos_potentialEvatrans_mm, NumericVector capacity_mm, NumericVector water_mm) {
        typedef SEXP(*Ptr_evatransActual_GR4J)(SEXP,SEXP,SEXP);
        static Ptr_evatransActual_GR4J p_evatransActual_GR4J = NULL;
        if (p_evatransActual_GR4J == NULL) {
            validateSignature("NumericVector(*evatransActual_GR4J)(NumericVector,NumericVector,NumericVector)");
            p_evatransActual_GR4J = (Ptr_evatransActual_GR4J)R_GetCCallable("EDCHM", "_EDCHM_evatransActual_GR4J");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransActual_GR4J(Shield<SEXP>(Rcpp::wrap(atmos_potentialEvatrans_mm)), Shield<SEXP>(Rcpp::wrap(capacity_mm)), Shield<SEXP>(Rcpp::wrap(water_mm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransActual_UBC(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_ubc_gamma) {
        typedef SEXP(*Ptr_evatransActual_UBC)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransActual_UBC p_evatransActual_UBC = NULL;
        if (p_evatransActual_UBC == NULL) {
            validateSignature("NumericVector(*evatransActual_UBC)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransActual_UBC = (Ptr_evatransActual_UBC)R_GetCCallable("EDCHM", "_EDCHM_evatransActual_UBC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransActual_UBC(Shield<SEXP>(Rcpp::wrap(atmos_potentialEvatrans_mm)), Shield<SEXP>(Rcpp::wrap(water_mm)), Shield<SEXP>(Rcpp::wrap(capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_evatrans_ubc_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransLand_Liang(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_lia_gamma) {
        typedef SEXP(*Ptr_evatransLand_Liang)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransLand_Liang p_evatransLand_Liang = NULL;
        if (p_evatransLand_Liang == NULL) {
            validateSignature("NumericVector(*evatransLand_Liang)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransLand_Liang = (Ptr_evatransLand_Liang)R_GetCCallable("EDCHM", "_EDCHM_evatransLand_Liang");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransLand_Liang(Shield<SEXP>(Rcpp::wrap(atmos_potentialEvatrans_mm)), Shield<SEXP>(Rcpp::wrap(water_mm)), Shield<SEXP>(Rcpp::wrap(capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_evatrans_lia_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector evatransSoil_Liang(NumericVector atmos_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_lia_B) {
        typedef SEXP(*Ptr_evatransSoil_Liang)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_evatransSoil_Liang p_evatransSoil_Liang = NULL;
        if (p_evatransSoil_Liang == NULL) {
            validateSignature("NumericVector(*evatransSoil_Liang)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_evatransSoil_Liang = (Ptr_evatransSoil_Liang)R_GetCCallable("EDCHM", "_EDCHM_evatransSoil_Liang");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_evatransSoil_Liang(Shield<SEXP>(Rcpp::wrap(atmos_potentialEvatrans_mm)), Shield<SEXP>(Rcpp::wrap(water_mm)), Shield<SEXP>(Rcpp::wrap(capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_evatrans_lia_B)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector infilt_SupplyRatio(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_sur_k) {
        typedef SEXP(*Ptr_infilt_SupplyRatio)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_infilt_SupplyRatio p_infilt_SupplyRatio = NULL;
        if (p_infilt_SupplyRatio == NULL) {
            validateSignature("NumericVector(*infilt_SupplyRatio)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_infilt_SupplyRatio = (Ptr_infilt_SupplyRatio)R_GetCCallable("EDCHM", "_EDCHM_infilt_SupplyRatio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_infilt_SupplyRatio(Shield<SEXP>(Rcpp::wrap(land_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_infilt_sur_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector infilt_SupplyPow(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_sup_k, NumericVector param_infilt_sup_gamma) {
        typedef SEXP(*Ptr_infilt_SupplyPow)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_infilt_SupplyPow p_infilt_SupplyPow = NULL;
        if (p_infilt_SupplyPow == NULL) {
            validateSignature("NumericVector(*infilt_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_infilt_SupplyPow = (Ptr_infilt_SupplyPow)R_GetCCallable("EDCHM", "_EDCHM_infilt_SupplyPow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_infilt_SupplyPow(Shield<SEXP>(Rcpp::wrap(land_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_infilt_sup_k)), Shield<SEXP>(Rcpp::wrap(param_infilt_sup_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector infilt_AcceptRatio(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_acr_k) {
        typedef SEXP(*Ptr_infilt_AcceptRatio)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_infilt_AcceptRatio p_infilt_AcceptRatio = NULL;
        if (p_infilt_AcceptRatio == NULL) {
            validateSignature("NumericVector(*infilt_AcceptRatio)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_infilt_AcceptRatio = (Ptr_infilt_AcceptRatio)R_GetCCallable("EDCHM", "_EDCHM_infilt_AcceptRatio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_infilt_AcceptRatio(Shield<SEXP>(Rcpp::wrap(land_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_infilt_acr_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector infilt_AcceptPow(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_acp_k, NumericVector param_infilt_acp_gamma) {
        typedef SEXP(*Ptr_infilt_AcceptPow)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_infilt_AcceptPow p_infilt_AcceptPow = NULL;
        if (p_infilt_AcceptPow == NULL) {
            validateSignature("NumericVector(*infilt_AcceptPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_infilt_AcceptPow = (Ptr_infilt_AcceptPow)R_GetCCallable("EDCHM", "_EDCHM_infilt_AcceptPow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_infilt_AcceptPow(Shield<SEXP>(Rcpp::wrap(land_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_infilt_acp_k)), Shield<SEXP>(Rcpp::wrap(param_infilt_acp_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector infilt_HBV(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_hbv_beta) {
        typedef SEXP(*Ptr_infilt_HBV)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_infilt_HBV p_infilt_HBV = NULL;
        if (p_infilt_HBV == NULL) {
            validateSignature("NumericVector(*infilt_HBV)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_infilt_HBV = (Ptr_infilt_HBV)R_GetCCallable("EDCHM", "_EDCHM_infilt_HBV");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_infilt_HBV(Shield<SEXP>(Rcpp::wrap(land_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_infilt_hbv_beta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector infilt_GR4J(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm) {
        typedef SEXP(*Ptr_infilt_GR4J)(SEXP,SEXP,SEXP);
        static Ptr_infilt_GR4J p_infilt_GR4J = NULL;
        if (p_infilt_GR4J == NULL) {
            validateSignature("NumericVector(*infilt_GR4J)(NumericVector,NumericVector,NumericVector)");
            p_infilt_GR4J = (Ptr_infilt_GR4J)R_GetCCallable("EDCHM", "_EDCHM_infilt_GR4J");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_infilt_GR4J(Shield<SEXP>(Rcpp::wrap(land_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector infilt_SCS(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_scs_CN) {
        typedef SEXP(*Ptr_infilt_SCS)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_infilt_SCS p_infilt_SCS = NULL;
        if (p_infilt_SCS == NULL) {
            validateSignature("NumericVector(*infilt_SCS)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_infilt_SCS = (Ptr_infilt_SCS)R_GetCCallable("EDCHM", "_EDCHM_infilt_SCS");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_infilt_SCS(Shield<SEXP>(Rcpp::wrap(land_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_infilt_scs_CN)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector infilt_UBC(NumericVector land_water_mm, NumericVector land_impermeableFrac_1, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_ubc_P0AGEN) {
        typedef SEXP(*Ptr_infilt_UBC)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_infilt_UBC p_infilt_UBC = NULL;
        if (p_infilt_UBC == NULL) {
            validateSignature("NumericVector(*infilt_UBC)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_infilt_UBC = (Ptr_infilt_UBC)R_GetCCallable("EDCHM", "_EDCHM_infilt_UBC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_infilt_UBC(Shield<SEXP>(Rcpp::wrap(land_water_mm)), Shield<SEXP>(Rcpp::wrap(land_impermeableFrac_1)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_infilt_ubc_P0AGEN)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector infilt_XAJ(NumericVector land_water_mm, NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_infilt_xaj_B) {
        typedef SEXP(*Ptr_infilt_XAJ)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_infilt_XAJ p_infilt_XAJ = NULL;
        if (p_infilt_XAJ == NULL) {
            validateSignature("NumericVector(*infilt_XAJ)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_infilt_XAJ = (Ptr_infilt_XAJ)R_GetCCallable("EDCHM", "_EDCHM_infilt_XAJ");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_infilt_XAJ(Shield<SEXP>(Rcpp::wrap(land_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_infilt_xaj_B)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector intercep_Full(NumericVector atmos_rain_mm, NumericVector land_interceptWater_mm, NumericVector land_interceptCapacity_mm) {
        typedef SEXP(*Ptr_intercep_Full)(SEXP,SEXP,SEXP);
        static Ptr_intercep_Full p_intercep_Full = NULL;
        if (p_intercep_Full == NULL) {
            validateSignature("NumericVector(*intercep_Full)(NumericVector,NumericVector,NumericVector)");
            p_intercep_Full = (Ptr_intercep_Full)R_GetCCallable("EDCHM", "_EDCHM_intercep_Full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_intercep_Full(Shield<SEXP>(Rcpp::wrap(atmos_rain_mm)), Shield<SEXP>(Rcpp::wrap(land_interceptWater_mm)), Shield<SEXP>(Rcpp::wrap(land_interceptCapacity_mm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector percola_GR4J(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_percola_gr4_k) {
        typedef SEXP(*Ptr_percola_GR4J)(SEXP,SEXP,SEXP);
        static Ptr_percola_GR4J p_percola_GR4J = NULL;
        if (p_percola_GR4J == NULL) {
            validateSignature("NumericVector(*percola_GR4J)(NumericVector,NumericVector,NumericVector)");
            p_percola_GR4J = (Ptr_percola_GR4J)R_GetCCallable("EDCHM", "_EDCHM_percola_GR4J");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_percola_GR4J(Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_percola_gr4_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector percola_SupplyRatio(NumericVector soil_water_mm, NumericVector param_percola_sur_k) {
        typedef SEXP(*Ptr_percola_SupplyRatio)(SEXP,SEXP);
        static Ptr_percola_SupplyRatio p_percola_SupplyRatio = NULL;
        if (p_percola_SupplyRatio == NULL) {
            validateSignature("NumericVector(*percola_SupplyRatio)(NumericVector,NumericVector)");
            p_percola_SupplyRatio = (Ptr_percola_SupplyRatio)R_GetCCallable("EDCHM", "_EDCHM_percola_SupplyRatio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_percola_SupplyRatio(Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(param_percola_sur_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector percola_SupplyPow(NumericVector soil_water_mm, NumericVector soil_capacity_mm, NumericVector param_percola_sup_k, NumericVector param_percola_sup_gamma) {
        typedef SEXP(*Ptr_percola_SupplyPow)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_percola_SupplyPow p_percola_SupplyPow = NULL;
        if (p_percola_SupplyPow == NULL) {
            validateSignature("NumericVector(*percola_SupplyPow)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_percola_SupplyPow = (Ptr_percola_SupplyPow)R_GetCCallable("EDCHM", "_EDCHM_percola_SupplyPow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_percola_SupplyPow(Shield<SEXP>(Rcpp::wrap(soil_water_mm)), Shield<SEXP>(Rcpp::wrap(soil_capacity_mm)), Shield<SEXP>(Rcpp::wrap(param_percola_sup_k)), Shield<SEXP>(Rcpp::wrap(param_percola_sup_gamma)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector snowMelt_Kustas(NumericVector snow_ice_mm, NumericVector atmos_temperature_Cel, NumericVector atmos_netRadiat_MJ, NumericVector param_snow_kus_fE, NumericVector param_snow_kus_fT) {
        typedef SEXP(*Ptr_snowMelt_Kustas)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_snowMelt_Kustas p_snowMelt_Kustas = NULL;
        if (p_snowMelt_Kustas == NULL) {
            validateSignature("NumericVector(*snowMelt_Kustas)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_snowMelt_Kustas = (Ptr_snowMelt_Kustas)R_GetCCallable("EDCHM", "_EDCHM_snowMelt_Kustas");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_snowMelt_Kustas(Shield<SEXP>(Rcpp::wrap(snow_ice_mm)), Shield<SEXP>(Rcpp::wrap(atmos_temperature_Cel)), Shield<SEXP>(Rcpp::wrap(atmos_netRadiat_MJ)), Shield<SEXP>(Rcpp::wrap(param_snow_kus_fE)), Shield<SEXP>(Rcpp::wrap(param_snow_kus_fT)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector snowMelt_Factor(NumericVector snow_ice_mm, NumericVector param_snow_fac_Tmelt, NumericVector param_snow_fac_Tb, NumericVector param_snow_fac_f) {
        typedef SEXP(*Ptr_snowMelt_Factor)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_snowMelt_Factor p_snowMelt_Factor = NULL;
        if (p_snowMelt_Factor == NULL) {
            validateSignature("NumericVector(*snowMelt_Factor)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_snowMelt_Factor = (Ptr_snowMelt_Factor)R_GetCCallable("EDCHM", "_EDCHM_snowMelt_Factor");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_snowMelt_Factor(Shield<SEXP>(Rcpp::wrap(snow_ice_mm)), Shield<SEXP>(Rcpp::wrap(param_snow_fac_Tmelt)), Shield<SEXP>(Rcpp::wrap(param_snow_fac_Tb)), Shield<SEXP>(Rcpp::wrap(param_snow_fac_f)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

}

#endif // RCPP_EDCHM_RCPPEXPORTS_H_GEN_
